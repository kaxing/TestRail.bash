#!/usr/bin/env bash

set -e

if [ -z "$TOKEN" ] || [ -z "$HOST" ]; then
  echo "\$TOKEN or \$HOST is NULL, Please assign proper values!"
  exit 1
fi

p() {
  echo "$*"
  read -p "Press any key to continue.."
}

check_depedency() {
  for command in $@; do
    if [[ ! -x "$(command -v $command)" ]]; then
      echo "Please install \`$command\`, thank you so much!"
      exit 1
    fi
  done
}

call_api() {

  local Parameters=($@)

  local Server="$HOST"
  local Request="${Parameters[0]}"
  local API_endpoint="${Parameters[1]}"
  local JSON_DATA="${Parameters[2]}"
  local Path_Params="${Parameters[3]}"

  # TODO: check api parameters

  # curl dry test --proxy localhost:8000 \ # test with nc -l localhost 8000

  curl \
    --silent \
    --request $Request \
    --header "Content-Type: application/json" \
      --user "$TOKEN" \
      --data "$JSON_DATA" \
    "$Server/$API_endpoint"
}

get_user_id_from_json() {

  list_of_user=$(call_api "GET index.php?/api/v2/get_users")
  email="$@"

  echo "$(jq --arg email "$email" '.[]|select(.email==$email)| .id' <(echo $list_of_user))"
}

get_list_of_tests_from_run(){

  local run_id=$@

  list_of_tests=$(call_api "GET index.php?/api/v2/get_tests/$run_id")
  list_of_testids=$(shuf <(jq '.[]|.id' <(echo $list_of_tests)))
  number_of_tests=$(echo "$list_of_testids"|wc -l)

  list_of_testids=($list_of_testids)
}

add_result() {

  local parameters=($@)

  local test=${parameters[0]}
  local tester=${parameters[1]}
  local data='{"test_id":"'$test'","assignedto_id":"'$tester'","comment":"Assign_through_API"}'

  test_id=$test # keep the name convention
  call_api "POST index.php?/api/v2/add_result/$test_id $data"
}

# scipt begin here

check_depedency bash curl jq

# check arguments
ARGS=( "$@" )
numnber_of_args="${#ARGS}"
second_arg="${ARGS[1]}"
if [ "$numnber_of_args" -lt "1" ] || [ -z "$second_arg" ]; then
  echo "Please assign test run ID with at least one email"
  echo "Example: 12345 first.person@gmail.com second.person@gmail.com"
fi

# check server status
api_server_status=$( curl --write-out "%{http_code}" --silent --output /dev/null --header "Content-Type: application/json" --request GET --user "$TOKEN" $HOST/index.php?/api/v2/get_project/1 )
if [ ! "$api_server_status" == "200" ]; then
  echo -e "Something wrong with API connection;\nPlease check Test Rail status."
  exit 1
fi

test_run_id="${ARGS[0]}"
get_list_of_tests_from_run $test_run_id

email_list=( "$(echo ${ARGS[@]:1})" )
testers=( "$(echo ${email_list[@]})" )
range=${#testers[@]}
for((i=0; i<$range; i++)); do
  testers[$i]=$(get_user_id_from_json ${testers[i]})
done

tester_index=0
divide_base=0
test_remainders=0

number_of_testers="${#testers[@]}"

let divide_base=number_of_tests/number_of_testers
if [ "$number_of_testers" -gt "1" ]; then
  let "test_remainders = number_of_tests % number_of_testers"
fi

p "To start sending massive requests to Test Rail API service;"

let "range = number_of_tests - 1"
t=0 # tester index counter
for((i=0; i<=$range; i++)); do
  sleep 0.$(shuf -i 0-9 -n 1)
  add_result ${list_of_testids[$i]} ${testers[t]}
  divide_counter=$( echo $(( divide_base*(t+1) )) )
  if(( $i == $divide_counter )) && (( $t < ${#testers[@]} )); then
    let t++
  fi
done

echo ""
